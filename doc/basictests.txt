
#Test directly the camera within python:


from Lima import Core
from Lima import Pixirad as PixiradAcq




# Set the number of image treatment threads according to the number of CPU available on your mighty machine :
Core.Processlib.PoolThreadMgr.get().setNumberOfThread(20)



# Create your camera with its network settings and model (PX8 or PX1)

print "\n\n\n\n ======= INIT ======== \n"
camera = PixiradAcq.Camera("192.168.0.1", 2222, "PX8")
camera.init() 


print "\n\n\n\n ======= INTERFACE ======== \n"
camera_interface = PixiradAcq.Interface(camera)

# Set some feature (check manual) 
# color mode (only 1 col mode supported)
camera_interface.setColorMode(camera.COLMODE_1COL0)
# Set point (more than acheavable by the peliter to have full powa):
camera.setCoolingTemperatureSetpoint(-50) 

# Set some energy thresholds (check manual, as they will fall in gain level (ranges of energy).

camera.setLowThreshold0(10)
camera.setHighThreshold0(60)
camera.setLowThreshold1(10)
camera.setHighThreshold1(60)

# Some high tension management 
camera.setHighVoltageBiais(2100)
camera.setHVBiasModePower(1)
camera.setHighVoltageDelayBeforeOn(3)
camera.setHVRefreshPeriod(1000);

# some ethernet interface 
camera_interface.setTrsfMode(camera.UNMOD)


# Get control over things:
print "\n\n\n\n ======= CONTROL ======== \n"
control = Core.CtControl(camera_interface)
# set how much you want lima to buffer memory for treatment.
control.buffer().setMaxMemory(70)


# Get the object with whom you will play :
print "\n\n\n\n ======= ACQUISITION OBJECT ======== \n"
acq = control.acquisition()
# Define trigger:
acq.setTriggerMode(Core.IntTrig)
#acq.setTriggerMode(Core.ExtTrigMult)



# save somewhere
saving = control.saving()
pars=newsaving.getParameters()
pars.directory='/tmp/test'
pars.prefix=basename
pars.suffix='.edf'
pars.fileFormat=Core.CtSaving.EDF
pars.savingMode=Core.CtSaving.AutoFrame
saving.setParameters(pars)




# Take images !
# expo time for one frame :
acq.setAcqExpoTime(0.01)
# number of frames:
acq.setAcqNbFrames(10)
# get it !
control.prepareAcq(); 
control.startAcq()

# pretty ones now !
# Take many (100) images and accumulate them to have better stats and one image written:
acq.setAcqMode(Core.Accumulation)
# Max expo time per frame:
acq.setAccMaxExpoTime(0.01)
# Total time for the accumulation:
acq.setAcqExpoTime(1);
# how many accumulated images:
acq.setAcqNbFrames(1)
# get them all and keep one:
control.prepareAcq(); 
control.startAcq()






### Tango DS musts:
#properies 
initial_model = PX8   // or PX1
ip_address 192.168.0.1
port number 2222


### pyTango DS examples :

import PyTango

pixi = PyTango.DeviceProxy("d05/pixirad/pixirad")
limaccd = PyTango.DeviceProxy("d05/pixirad/pixirad8")

pixi.cooling_temperature_setpoint = -50
pixi.high_voltage_biais = 2100
pixi.dead_time_free_mode = 'DEAD_TIME_FREE_MODE_OFF'
pixi.color_mode = 'COLMODE_1COL0'
pixi.low_threshold0 =  1
pixi.high_threshold0 = 99
pixi.low_threshold1 =  1
pixi.high_threshold1 = 99
#pixi.sensor_config_build = 'PX8'
pixi.h_v_bias_mode_power = 1
pixi.trsf_mode = "UNMOD"

limaccd.buffer_max_memory = 80	


limaccd.acq_nb_frames = 0
limaccd.acq_expo_time = 0.01
limaccd.prepareAcq()
limaccd.startAcq()





